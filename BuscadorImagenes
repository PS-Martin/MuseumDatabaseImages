'Creado por Pablo Sanz Martín 2019 para la Biblioteca de la ETSIT UPM
'

Public interruptorSeguridad As Boolean 'esta variable está para detener el programa si su valor es True

Sub Botón4_Haga_clic_en()
    UserForm1.Show
End Sub





Sub BuscaImagenes(inicio As Integer, fin As Integer)
'
' ScriptImagenes Macro
'
'Este script ordena en una columna una lista de imágenes y les asigna un link hacia otras imágenes relacionadas. Está dividido en 3 bucles que organizan las imágenes en orden en 3 columnas distintas dependiendo de cuántas cifras tenga el número asociado a cada imágen.
'Sería posible optimizarlo un poco y reducir el número de variables auxiliares, pero puede ser útil para garantizar que no se tocan los datos introducidos y más adelante alterar o incluir alguna funcionalidad.
'variables auxiliares
'
'Creado por Pablo Sanz Martín 2019 para la Biblioteca de la ETSIT UPM
'
Dim picDir As String 'variable para gestionar la direccion en carpeta de los iconos
Dim picLink As String 'variable para gestionar la dirección de los links de cada foto
Dim ceros As String 'variable auxiliar para añadir los ceros pertinentes a cada imagen de cara a obtener la direccion (es de una version antigua, podria sustituirse por un manejo de TransNum o TransText).
Dim marcPos As Integer 'variable para gestionar la posición de las casillas
Dim letraAccesorios As Integer 'variable para ampliar los saltos según el número de accesorios
'variables auxiliares para gestionar los accesorios: se comparten para icono y link
Dim PicDirA As String
Dim PicDirB As String
Dim PicDirC As String
Dim PicDirD As String
Dim PicDirE As String
Dim PicDirF As String
Dim PicDirG As String
Dim PicDirH As String
'variables que copian los datos iniciales entregados a este método para trabajar con ellos
Dim inicioC As Integer
Dim finC As Integer


Dim auxCounter As Integer 'counter auxiliar por lo mismo

'inicializamos algunos valores
 letraAccesorios = 0
 inicioC = inicio
 finC = fin
 interruptorSeguridad = False
 
'
'SCRIPT
'
'Hacemos una última comprobación de valores: vemos si hay un número de objeto negativo o si el rango está invertido
    If inicio <= 0 Then
        MsgBox "El número inicial debe ser mayor que 0"
        Exit Sub
    End If
    
    If fin <= 0 Then
         MsgBox "El número final debe ser mayor que 0"
        Exit Sub
    End If
    
    If fin < inicio Then
            'esta comprobacion sería ya innecesaria pues está contemplada en el código del formulario
         MsgBox "El número inicial debe ser menor que el final"
        Exit Sub
    End If




 'Después borramos todo lo que haya en el espacio de trabajo
 Call Borrar(inicioC, finC)
 
 If interruptorSeguridad = True Then Exit Sub

 'Iniciamos un for que repetirá todas estas acciones de principio a fin
 For counter = inicio To fin

    auxCounter = counter

    'Ahora asignamos una cantidad de ceros según el número de cifras de cada pieza, pues tendrá distinto nombre a la hora de buscar la imagen
 
    If 0 < counter Then If counter < 10 Then ceros = "0000"

    If 9 < counter Then If counter < 100 Then ceros = "000"

    If 99 < counter Then If counter < 1000 Then ceros = "00"
       
    If 999 < counter Then If counter < 10000 Then ceros = "0"
 
         
    marcPos = (ObtieneValores(auxCounter)) 'dado que la primera fila es para los títulos de las columnas, comenzamos a "imprimir" la lista a partir de la fila 2 (+1)
    
    Range("C" & (marcPos)).Select  'en esta vuelta de bucle seleccionamos la celda concreta Gx
    
    picDir = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "_1" & ".jpg"  'componemos el nombre de imagen según el cual la buscaremos
    
       
    If Dir(picDir) <> "" Then  'comprobamos si existe la imagen a la que hace referencia picDir, y si existe la insertamos y después la reajustamos a la celda con FitPic
      'quitamos color y contenido de la celda si lo hubiera, por si es una antigua celda marcada sin imagen
      Range("C" & (marcPos)).Interior.ColorIndex = 0
      Range("C" & (marcPos)).Clear
      ActiveSheet.Pictures.Insert(picDir).Select
      Call FitPict
    Else
        picDir = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "_2" & ".jpg"  'si no existiera, renombramos picDir por si hubiera otra posible y repetimos intento
        If Dir(picDir) <> "" Then
            ActiveSheet.Pictures.Insert(picDir).Select
            Call FitPict
        Else
         Range("C" & (marcPos)).Value = "Falta Icono en carpeta"
         Range("C" & (marcPos)).Interior.ColorIndex = 3
         GoTo NO_ICONO1
        End If
    End If
    
    'Si no hubiera imagen 1 ni 2 de esa pieza, seguimos adelante.
    
    'repetimos proceso con los links
    picLink = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "_1" & ".jpg"
    
    If Dir(picLink) <> "" Then
      ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=picLink
    Else
        picLink = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "_2" & ".jpg"
        If Dir(picLink) <> "" Then
        ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=picLink
        End If
    End If
    
    
NO_ICONO1:
    
    PicDirA = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "a" & "_1" & ".jpg"
    PicDirB = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "b" & "_1" & ".jpg"
    PicDirC = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "c" & "_1" & ".jpg"
    PicDirD = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "d" & "_1" & ".jpg"
    PicDirE = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "e" & "_1" & ".jpg"
    PicDirF = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "f" & "_1" & ".jpg"
    PicDirG = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "f" & "_1" & ".jpg"
    PicDirH = "H:\MUSEO\DIGITOOL\FOTOS\4_Iconos\MUSEO " & ceros & counter & "f" & "_1" & ".jpg"
    
    If Dir(PicDirA) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 1)).Select
        ActiveSheet.Pictures.Insert(PicDirA).Select
        Call FitPict
        
        PicDirA = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "a" & "_1" & ".jpg"
        If Dir(PicDirA) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirA
        End If
    End If
    
    If Dir(PicDirB) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 2)).Select
        ActiveSheet.Pictures.Insert(PicDirB).Select
        Call FitPict
        
        PicDirB = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "b" & "_1" & ".jpg"
        If Dir(PicDirB) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirB
        End If
    End If
    
    If Dir(PicDirC) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 3)).Select
        ActiveSheet.Pictures.Insert(PicDirC).Select
        Call FitPict
        
        PicDirC = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "c" & "_1" & ".jpg"
        If Dir(PicDirC) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirC
        End If
    End If
    
    If Dir(PicDirD) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 4)).Select
        ActiveSheet.Pictures.Insert(PicDirD).Select
        Call FitPict
        
        PicDirD = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "d" & "_1" & ".jpg"
        If Dir(PicDirD) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirD
        End If
    End If
    
    If Dir(PicDirE) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 5)).Select
        ActiveSheet.Pictures.Insert(PicDirE).Select
        Call FitPic
        
        PicDirE = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "e" & "_1" & ".jpg"
        If Dir(PicDirE) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirE
        End If
    End If
    
    If Dir(PicDirF) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 6)).Select
        ActiveSheet.Pictures.Insert(PicDirF).Select
        Call FitPic
        
        PicDirF = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "f" & "_1" & ".jpg"
        If Dir(PicDirF) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirF
        End If
    End If
    
    If Dir(PicDirG) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 7)).Select
        ActiveSheet.Pictures.Insert(PicDirG).Select
        Call FitPic
        
        PicDirG = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "g" & "_1" & ".jpg"
        If Dir(PicDirG) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirG
        End If
    End If
    
    If Dir(PicDirH) <> "" Then
        letraAccesorios = letraAccesorios + 1
        Range("C" & (marcPos + 8)).Select
        ActiveSheet.Pictures.Insert(PicDirH).Select
        Call FitPic
        
        PicDirH = "H:\MUSEO\DIGITOOL\FOTOS\2_Retocadas\2-Con marca de agua UPM\MUSEO " & ceros & counter & "h" & "_1" & ".jpg"
        If Dir(PicDirH) <> "" Then
            ActiveSheet.Hyperlinks.Add Anchor:=Selection.ShapeRange.Item(1), Address:=PicDirH
        End If
    End If

 

 
 
 Next counter

'ocultamos formulario
UserForm1.Hide
    
End Sub

Sub FitPict()
'
'FitPic Macro
'
'Este script ajusta una imagen a la celda seleccionada priorizando la altura
'
'Created by TPortsmouth, published in mrexcell.com => https://www.mrexcel.com/forum/excel-questions/999545-auto-resize-image-excel-merged-cell.html
'
    On Error GoTo NOT_SHAPE
    Dim PicWtoHRatio As Single
    Dim CellWtoHRatio As Single
    With Selection
        PicWtoHRatio = .Width / .Height
    End With
    With Selection.TopLeftCell
        CellWtoHRatio = .Width / .RowHeight
    End With
    Select Case PicWtoHRatio / CellWtoHRatio
        Case Is > 1
            With Selection
                .Width = .TopLeftCell.Width
                .Height = .Width / PicWtoHRatio
            End With
        Case Else
            With Selection
                .Height = .TopLeftCell.RowHeight
                .Width = .Height * PicWtoHRatio
            End With
        End Select
    With Selection
        .Top = .TopLeftCell.Top
        .Left = .TopLeftCell.Left
    End With
Exit Sub

NOT_SHAPE:  'manejo del error: no hay  foto en esa casilla (no hacer nada)
Exit Sub
End Sub






Sub Borrar(r1 As Integer, r2 As Integer)
'
'Borrar Macro
'
'Este permite borrar todas las imágenes de un rango. Desconozco por qué pero puede dar algunos errores (normalmente 13) si en la hoja (quizá solo en el rango) hay imágenes introducidas manualmente.
'
'Creado por Pablo Sanz Martín 2019 para la Biblioteca de la ETSIT UPM
'
    Dim s As Picture
    Dim cellRange As String
    Dim CambioIni As String
    Dim CambioFin As String
    Dim CeldaIni As Range
    Dim CeldaFin As Range
    Dim Fila1 As Integer
    Dim Fila2 As Integer
    Dim AuxR1 As Integer
    Dim AuxR2 As Integer
    Dim Err As String 'variable auxiliar para MsgBox

    AuxR1 = r1
    AuxR2 = r2

    'Dado que a veces hay piezas con accesorios, el rango en número de casillas no es simplemente lo que introduce el usuario: es necesario añadir casillas extra.
    'Por eso generamos primero los identificadores del catalogo correspondientes a las cifras dadas
    CambioIni = TransNum(AuxR1)
    CambioFin = TransNum(AuxR2)

'LOG
'MsgBox CambioIni
'MsgBox CambioFin

    'Buscamos las celdas en las que se encuentran
    Set CeldaIni = ActiveSheet.UsedRange.Find(What:=CambioIni, LookAt:=xlWhole)
    Set CeldaFin = ActiveSheet.UsedRange.Find(What:=CambioFin, LookAt:=xlWhole)
    
    If CeldaIni Is Nothing Then
        Err = "No se encuentra el número de registro inicial " & CambioIni
        MsgBox Err
        interruptorSeguridad = True
        Exit Sub
    End If
    If CeldaFin Is Nothing Then
        Err = "No se encuentra el número de registro final " & CambioFin
        MsgBox Err
        interruptorSeguridad = True
        Exit Sub
    End If

    'Y extraemos la fila de cada una
    Fila1 = CeldaIni.Row
    Fila2 = CeldaFin.Row

    r1 = CInt(Fila1)
    r2 = CInt(Fila2)

'LOG
'MsgBox r1
'MsgBox r2

    cellRange = "C" & r1 & ":" & "C" & r2

'LOG
'MsgBox cellRange

    'Aquí borramos cada imagen que se encuentre dentro del rango de celdas elegido
    For Each s In ActiveSheet.Pictures
        If Not Intersect(Range(cellRange), s.TopLeftCell) Is Nothing Then
            s.Delete
        End If
    Next s

End Sub


Function TransNum(aux As Integer) As String
'
'TransNum Macro
'
'Genera el número de inventario a partir del número de pieza (es decir, añadiendo los ceros correspondientes e introduciendo el punto
'
'Creado por Pablo Sanz Martín 2019 para la Biblioteca de la ETSIT UPM
'
    Dim valor As String
    Dim valorRe As String
    valorRe = "a"

    'según el número de cifras asignamos una cantidad de ceros
    If aux < 10 Then valor = "00" & aux

    If 9 < aux Then If aux < 100 Then valor = "0" & aux

    If 99 < aux Then If aux < 1000 Then valor = "" & aux
    
    'Despues añadimos el punto en la posición dada.
    If aux < 1000 Then
        valor = "00." & valor
    Else
        valor = "" & aux
        If aux < 9999 Then
            valorRe = Left(valor, 1)
            valor = valorRe & "." & Right(valor, 3)
            valor = "0" & valor
        Else
            valorRe = Left(valor, 2)
            valor = valorRe & "." & Right(valor, 3)
            
        End If
    End If

    TransNum = valor

End Function


Function TransText(auxi As String) As Integer
'
'TransText Macro
'
'Obtiene un número que puede utilizar el programa para hacer cálculos a partir del número de inventario
'
'Creado por Pablo Sanz Martín 2019 para la Biblioteca de la ETSIT UPM
'
    On Error GoTo FORMATO 'manejo de errores: en principio cuando se introduzcan valores que no se pueden transformar de String a Integer

    Dim myString As String 'variable auxiliar

    myString = Replace(auxi, ".", "") 'Con esta instrucción de reemplazo quitamos los puntos de la expresión del número de inventario

    TransText = CInt(myString) 'convertimos la expresión final en un número

    Exit Function

FORMATO:
    TransText = 17015 'asignamos un valor al azar para gestionar este error desde el método principal que llama a este. Ojo que si algún día hay un número de inventario tal, no podría gestionarse. Aunque el programa solo está pensado para llegar a las 10.000 piezas

End Function

Function ObtieneValores(valor As Integer) As Integer
'
'ObtieneValores Macro
'
'Esta función devuelve un número que representa el número de fila de una celda que contiene el número de registro asignado al valor numérico que recibe la función.
'Es decir: nos permite obtener el número de fila de una pieza dada
'
'Creado por Pablo Sanz Martín 2019
'
    
    
    Dim num As String
    Dim celdilla As Range
    
    num = TransNum(valor)
        
    Set celdilla = ActiveSheet.UsedRange.Find(What:=num, LookAt:=xlWhole)
    
     If celdilla Is Nothing Then
        
        MsgBox "No se encuentra el número de registro " & num
        
        End 'finaliza todo el programa en el momento en que no encuentra un número de registro concreto.
        
     Else
        
    
          
    'Y extraemos la fila de cada una
    
        ObtieneValores = CInt(celdilla.Row)
    End If
    
End Function



Function Existe(count As Integer, rev As String, pos As Integer) As Boolean
'
'Existe Macro
'
'Esta función no se utiliza pero en una versión previa tenía sentido. La dejo aquí por si acaso. La idea (solucionando algún pequeño fallo) es que se asegure de que la pieza seleccionada se corresponde con el identificador de la casilla contigua. En principio no parece relevante ya que lo peor que puede pasar si no se corresponde es que no se incluya la imagen en ese punto, lo cual ya permite identificar fallo.
'
'Creado por Pablo Sanz Martín 2019 para la Biblioteca de la ETSIT UPM
'
    If TransNum(count) = rev Then
    Existe = True

    Else
      Range("C" & (pos)).Interior.ColorIndex = 3
     MsgBox "No hay coincidencia en la pieza" & Range("A" & (pos)).Value
     Existe = False
       
    End If

    End Function
